// 문제
// 오늘은 2007년 1월 1일 월요일이다. 그렇다면 2007년 x월 y일은 무슨 요일일까? 이를 알아내는 프로그램을 작성하시오.

// 입력
// 첫째 줄에 빈 칸을 사이에 두고 x(1 ≤ x ≤ 12)와 y(1 ≤ y ≤ 31)이 주어진다. 참고로 2007년에는 1, 3, 5, 7, 8, 10, 12월은 31일까지, 4, 6, 9, 11월은 30일까지, 2월은 28일까지 있다.

// 출력
// 첫째 줄에 x월 y일이 무슨 요일인지에 따라 SUN, MON, TUE, WED, THU, FRI, SAT중 하나를 출력한다.

// 풀이 핵심 아이디어

// 1. 요구사항
//    - 2007년 x월 y일이 무슨 요일인지 출력
//    - 출력: SUN, MON, TUE, WED, THU, FRI, SAT

// 2. 구현을 위해 필요한 정보
//    - 2007년은 평년이므로 2월은 28일까지
//    - 각 달별 일수: 1,3,5,7,8,10,12월은 31일, 4,6,9,11월은 30일
//    - 2007년 1월 1일은 월요일(MON)

// 3. 접근 아이디어
//    - 입력받은 x월 y일까지 지난 총 일수를 계산
//      -> 해당 월 이전 달들의 일수를 합산 후 y일을 더함
//    - 총 일수 % 7을 사용하여 요일을 계산
//      -> 1월 1일을 기준으로 7일마다 요일 반복
//    - 요일 배열 week[]에 0~6 인덱스로 매핑
//      -> 0: SUN, 1: MON, ..., 6: SAT

// 4. 구현 과정
//    - int day[] 배열에 각 달의 일수를 저장
//    - 총 일수(total_day) 계산: 1월 1일부터 x월 y일까지
//    - week[total_day % 7] 출력

// 5. 체크 사항
//    - 2007년 1월 1일이 MON이므로 1월 1일을 total_day=1로 계산해야 올바른 요일 출력
//    - 배열 인덱스와 나머지 연산이 일치하도록 주의

// 6. 최적화
//    - 이미 간단한 계산이므로 추가 최적화 불필요
//    - 상수 배열과 단순 반복문으로 충분히 효율적


#include<iostream>
using namespace std;

int main(){
    int x, y, total_day=0;;
    int day[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    string week[] = {"SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"};

    cin >> x >> y;
    for (int i = 1; i < x; i++) {
        total_day += day[i];
    }
    total_day += y;
    cout << week[total_day%7]<<endl;
}